// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: flex/scanner.flex

/**
* JFlex Seyyed & Yazdi Compiler
*/
import java.util.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class CompilerScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\u10df\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\4\22\0\1\3"+
    "\1\5\1\6\2\0\1\7\1\10\1\11\2\7\1\12"+
    "\1\13\1\7\1\14\1\15\1\16\1\17\11\20\2\7"+
    "\1\5\1\21\1\5\2\0\1\22\3\23\1\24\1\23"+
    "\2\25\1\26\2\25\1\27\1\25\1\30\1\25\1\31"+
    "\1\25\1\32\5\25\1\33\2\25\1\7\1\34\2\7"+
    "\1\35\1\0\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\25\1\47\1\50\1\25\1\51"+
    "\1\52\2\25\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\33\1\61\1\25\1\0\1\62\145\0\1\63\160\0"+
    "\1\64\u0258\0\1\65\123\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\5\3\2\5\20\6"+
    "\1\3\1\1\1\7\1\10\1\0\1\3\2\0\1\11"+
    "\1\12\2\0\13\6\1\13\7\6\1\0\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\2\0\2\11\1\0\1\22"+
    "\1\23\12\6\1\13\5\6\1\0\4\6\1\13\11\6"+
    "\1\13\14\6\1\13\5\6\1\13\6\6\1\13\24\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\154\0\242\0\330\0\154\0\154"+
    "\0\u010e\0\u0144\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288"+
    "\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438"+
    "\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8"+
    "\0\u061e\0\154\0\u0654\0\u068a\0\u068a\0\u06c0\0\u06f6\0\u072c"+
    "\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc"+
    "\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u07ce\0\u0a20\0\u0a56"+
    "\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\154\0\154"+
    "\0\154\0\154\0\154\0\154\0\u0bd0\0\u0c06\0\154\0\u0c3c"+
    "\0\u0c72\0\u0c72\0\u0798\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80"+
    "\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ca8\0\u0ec4\0\u0efa"+
    "\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa"+
    "\0\u1008\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224"+
    "\0\u125a\0\u1290\0\u125a\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e"+
    "\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u1440"+
    "\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u1626\0\u165c\0\u1692"+
    "\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u176a\0\u17a0\0\u17d6\0\u180c"+
    "\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc"+
    "\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c"+
    "\0\154";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\6\1\12\1\13\1\10\1\14\1\15\1\16\1\6"+
    "\6\17\1\20\1\21\1\22\1\17\2\3\1\17\1\23"+
    "\1\24\1\25\1\26\1\27\2\17\1\30\2\17\1\31"+
    "\1\17\1\32\1\33\1\34\1\17\1\35\1\36\1\17"+
    "\1\37\1\40\2\3\1\41\2\0\1\41\1\0\1\41"+
    "\1\42\2\41\1\0\22\41\1\43\31\41\70\0\1\4"+
    "\104\0\1\10\54\0\1\10\70\0\1\44\1\45\2\0"+
    "\1\15\1\16\1\10\57\0\1\45\1\44\2\0\1\15"+
    "\1\16\1\10\56\0\1\46\3\0\1\47\2\0\1\10"+
    "\61\0\1\50\1\0\2\16\3\0\1\51\6\0\1\52"+
    "\6\0\1\51\40\0\1\50\1\0\2\16\3\0\1\51"+
    "\15\0\1\51\42\0\2\53\1\0\12\53\1\0\25\53"+
    "\23\0\2\53\1\0\12\53\1\0\5\53\1\54\17\53"+
    "\23\0\2\53\1\0\12\53\1\0\16\53\1\55\6\53"+
    "\23\0\2\53\1\0\12\53\1\0\5\53\1\56\17\53"+
    "\23\0\2\53\1\0\12\53\1\0\15\53\1\57\1\60"+
    "\6\53\23\0\2\53\1\0\12\53\1\0\15\53\1\61"+
    "\7\53\23\0\2\53\1\0\12\53\1\0\15\53\1\62"+
    "\7\53\23\0\2\53\1\0\12\53\1\0\13\53\1\63"+
    "\11\53\23\0\2\53\1\0\12\53\1\0\1\53\1\64"+
    "\13\53\1\65\7\53\23\0\2\53\1\0\12\53\1\0"+
    "\6\53\1\66\5\53\1\67\10\53\23\0\2\53\1\0"+
    "\12\53\1\0\5\53\1\70\17\53\23\0\2\53\1\0"+
    "\12\53\1\0\5\53\1\71\17\53\23\0\2\53\1\0"+
    "\12\53\1\0\20\53\1\72\4\53\23\0\2\53\1\0"+
    "\12\53\1\0\16\53\1\73\6\53\23\0\2\53\1\0"+
    "\12\53\1\0\15\53\1\74\7\53\23\0\2\53\1\0"+
    "\12\53\1\0\10\53\1\75\14\53\66\0\1\10\70\0"+
    "\1\76\1\41\2\0\1\41\1\0\1\41\1\0\2\41"+
    "\1\0\22\41\1\0\31\41\6\0\1\77\2\0\1\100"+
    "\22\0\1\101\14\0\1\102\1\0\1\103\1\0\1\104"+
    "\27\0\2\105\45\0\12\46\1\106\53\46\2\47\1\107"+
    "\1\47\1\110\61\47\17\0\2\50\3\0\1\51\15\0"+
    "\1\51\36\0\2\111\2\0\2\112\64\0\2\113\1\0"+
    "\3\113\11\0\6\113\41\0\2\114\1\0\12\114\1\0"+
    "\25\114\23\0\2\114\1\0\12\114\1\0\23\114\1\115"+
    "\1\114\23\0\2\114\1\0\12\114\1\0\11\114\1\116"+
    "\13\114\23\0\2\114\1\0\12\114\1\0\1\114\1\117"+
    "\23\114\23\0\2\114\1\0\12\114\1\0\15\114\1\120"+
    "\7\114\23\0\2\114\1\0\12\114\1\0\5\114\1\121"+
    "\17\114\23\0\2\114\1\0\12\114\1\0\14\114\1\122"+
    "\10\114\23\0\2\114\1\0\12\114\1\0\21\114\1\123"+
    "\3\114\23\0\2\114\1\0\12\114\1\0\17\114\1\124"+
    "\5\114\23\0\2\114\1\0\12\114\1\0\13\114\1\125"+
    "\11\114\23\0\2\114\1\0\12\114\1\0\16\114\1\126"+
    "\6\114\23\0\2\114\1\0\12\114\1\0\20\114\1\126"+
    "\4\114\23\0\2\114\1\0\12\114\1\0\23\114\1\126"+
    "\1\114\23\0\2\114\1\0\12\114\1\0\3\114\1\127"+
    "\14\114\1\130\4\114\23\0\2\114\1\0\12\114\1\0"+
    "\16\114\1\131\6\114\23\0\2\114\1\0\12\114\1\0"+
    "\21\114\1\124\3\114\23\0\2\114\1\0\12\114\1\0"+
    "\11\114\1\132\13\114\23\0\2\114\1\0\12\114\1\0"+
    "\11\114\1\133\13\114\70\0\1\10\16\0\1\134\1\0"+
    "\2\105\3\0\1\51\15\0\1\51\23\0\12\46\1\106"+
    "\3\46\1\107\47\46\2\0\1\107\102\0\2\112\64\0"+
    "\2\135\1\0\12\135\1\0\25\135\23\0\2\135\1\0"+
    "\1\136\11\135\1\0\25\135\23\0\2\135\1\0\12\135"+
    "\1\0\14\135\1\137\10\135\23\0\2\135\1\0\12\135"+
    "\1\0\4\135\1\140\20\135\23\0\2\135\1\0\12\135"+
    "\1\0\13\135\1\141\11\135\23\0\2\135\1\0\12\135"+
    "\1\0\1\135\1\142\23\135\23\0\2\135\1\0\12\135"+
    "\1\0\20\135\1\143\4\135\23\0\2\135\1\0\12\135"+
    "\1\0\2\135\1\144\22\135\23\0\2\135\1\0\12\135"+
    "\1\0\5\135\1\141\17\135\23\0\2\135\1\0\12\135"+
    "\1\0\17\135\1\145\5\135\23\0\2\135\1\0\12\135"+
    "\1\0\15\135\1\146\7\135\23\0\2\135\1\0\12\135"+
    "\1\0\21\135\1\147\3\135\23\0\2\135\1\0\12\135"+
    "\1\0\11\135\1\150\13\135\23\0\2\135\1\0\12\135"+
    "\1\0\4\135\1\141\20\135\23\0\2\135\1\0\12\135"+
    "\1\0\13\135\1\145\11\135\23\0\2\134\3\0\1\51"+
    "\15\0\1\51\42\0\2\151\1\0\12\151\1\0\25\151"+
    "\23\0\2\151\1\0\12\151\1\0\16\151\1\152\6\151"+
    "\23\0\2\151\1\0\12\151\1\0\20\151\1\153\4\151"+
    "\23\0\2\151\1\0\4\151\1\154\1\155\4\151\1\0"+
    "\25\151\23\0\2\151\1\0\12\151\1\0\12\151\1\153"+
    "\12\151\23\0\2\151\1\0\12\151\1\0\11\151\1\156"+
    "\13\151\23\0\2\151\1\0\12\151\1\0\13\151\1\157"+
    "\11\151\23\0\2\151\1\0\12\151\1\0\5\151\1\153"+
    "\17\151\23\0\2\151\1\0\12\151\1\0\16\151\1\160"+
    "\6\151\23\0\2\151\1\0\12\151\1\0\16\151\1\161"+
    "\6\151\23\0\2\151\1\0\12\151\1\0\14\151\1\162"+
    "\10\151\23\0\2\163\1\0\12\163\1\0\25\163\23\0"+
    "\2\163\1\0\12\163\1\0\16\163\1\164\6\163\23\0"+
    "\2\163\1\0\12\163\1\0\14\163\1\165\10\163\23\0"+
    "\2\163\1\0\12\163\1\0\11\163\1\166\13\163\23\0"+
    "\2\163\1\0\12\163\1\0\14\163\1\167\10\163\23\0"+
    "\2\163\1\0\12\163\1\0\5\163\1\170\17\163\23\0"+
    "\2\163\1\0\12\163\1\0\4\163\1\170\20\163\23\0"+
    "\2\163\1\0\12\163\1\0\14\163\1\170\10\163\23\0"+
    "\2\163\1\0\12\163\1\0\7\163\1\170\15\163\23\0"+
    "\2\171\1\0\12\171\1\0\25\171\23\0\2\171\1\0"+
    "\12\171\1\0\1\171\1\172\23\171\23\0\2\171\1\0"+
    "\12\171\1\0\20\171\1\173\4\171\23\0\2\171\1\0"+
    "\12\171\1\0\14\171\1\174\10\171\23\0\2\171\1\0"+
    "\12\171\1\0\21\171\1\174\3\171\23\0\2\175\1\0"+
    "\12\175\1\0\25\175\23\0\2\175\1\0\12\175\1\0"+
    "\24\175\1\176\23\0\2\175\1\0\12\175\1\0\5\175"+
    "\1\177\17\175\23\0\2\175\1\0\12\175\1\0\5\175"+
    "\1\176\17\175\23\0\2\200\1\0\12\200\1\0\25\200"+
    "\23\0\2\200\1\0\12\200\1\0\7\200\1\201\15\200"+
    "\23\0\2\202\1\0\12\202\1\0\25\202\23\0\2\202"+
    "\1\0\12\202\1\0\5\202\1\203\17\202\23\0\2\204"+
    "\1\0\12\204\1\0\25\204\23\0\2\204\1\0\12\204"+
    "\1\0\16\204\1\205\6\204\23\0\2\206\1\0\12\206"+
    "\1\0\25\206\23\0\2\207\1\0\12\207\1\0\25\207"+
    "\23\0\2\210\1\0\12\210\1\0\25\210\23\0\2\211"+
    "\1\0\12\211\1\0\25\211\23\0\2\212\1\0\12\212"+
    "\1\0\25\212\23\0\2\213\1\0\12\213\1\0\25\213"+
    "\23\0\2\214\1\0\12\214\1\0\25\214\23\0\2\215"+
    "\1\0\12\215\1\0\25\215\23\0\2\216\1\0\12\216"+
    "\1\0\25\216\23\0\2\217\1\0\12\217\1\0\25\217"+
    "\23\0\2\220\1\0\12\220\1\0\25\220\23\0\2\221"+
    "\1\0\12\221\1\0\25\221\23\0\2\222\1\0\12\222"+
    "\1\0\25\222\23\0\2\223\1\0\12\223\1\0\25\223"+
    "\23\0\2\224\1\0\12\224\1\0\25\224\23\0\2\225"+
    "\1\0\12\225\1\0\25\225\23\0\2\226\1\0\12\226"+
    "\1\0\25\226\23\0\2\227\1\0\12\227\1\0\25\227"+
    "\23\0\2\230\1\0\12\230\1\0\25\230\23\0\2\231"+
    "\1\0\12\231\1\0\25\231\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7074];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\2\1\2\11\31\1\1\11\1\0\1\1"+
    "\2\0\2\1\2\0\23\1\1\0\6\11\2\0\1\11"+
    "\1\1\1\0\22\1\1\0\74\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string  = new StringBuffer();
    private Symbol symbol(String token, Type type) {
        if (type == Type.UNDEFINED) {
            System.err.println("Token " + yytext() + " is not defined");
        }
//        System.err.println("Obtain token " + token + " and type " + type);
        return new Symbol(token, type);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CompilerScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Symbol nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(yytext(), Type.UNDEFINED);
            }
            // fall through
          case 20: break;
          case 2:
            { return symbol(yytext(), Type.WHITESPACE);
            }
            // fall through
          case 21: break;
          case 3:
            { return symbol(yytext(), Type.OPERATOR_AND_PUNCTUATION);
            }
            // fall through
          case 22: break;
          case 4:
            { yybegin(STRING);
        return symbol(yytext(), Type.STRING);
            }
            // fall through
          case 23: break;
          case 5:
            { return symbol(yytext(), Type.INTEGER_NUMBER);
            }
            // fall through
          case 24: break;
          case 6:
            { return symbol(yytext(), Type.IDENTIFIER);
            }
            // fall through
          case 25: break;
          case 7:
            { string.append(yytext()); return symbol(yytext(), Type.STRING);
            }
            // fall through
          case 26: break;
          case 8:
            { yybegin(YYINITIAL);
                        string.append(yytext());
                        String value = string.toString();
                        string.setLength(0);
                        return symbol(yytext(), Type.STRING);
            }
            // fall through
          case 27: break;
          case 9:
            { return symbol(yytext(), Type.COMMENT);
            }
            // fall through
          case 28: break;
          case 10:
            { return symbol(yytext(), Type.REAL_NUMBER);
            }
            // fall through
          case 29: break;
          case 11:
            { return symbol(yytext(), Type.RESERVED_KEYWORD);
            }
            // fall through
          case 30: break;
          case 12:
            { string.append("\""); return symbol(yytext(), Type.SPECIAL_CHAR);
            }
            // fall through
          case 31: break;
          case 13:
            { string.append("\'"); return symbol(yytext(), Type.SPECIAL_CHAR);
            }
            // fall through
          case 32: break;
          case 14:
            { string.append("\\"); return symbol(yytext(), Type.SPECIAL_CHAR);
            }
            // fall through
          case 33: break;
          case 15:
            { string.append("\n"); return symbol(yytext(), Type.SPECIAL_CHAR);
            }
            // fall through
          case 34: break;
          case 16:
            { string.append("\r"); return symbol(yytext(), Type.SPECIAL_CHAR);
            }
            // fall through
          case 35: break;
          case 17:
            { string.append("\t"); return symbol(yytext(), Type.SPECIAL_CHAR);
            }
            // fall through
          case 36: break;
          case 18:
            { return symbol(yytext(), Type.SCIENTIFIC_NOTATION);
            }
            // fall through
          case 37: break;
          case 19:
            { return symbol(yytext(), Type.HEX);
            }
            // fall through
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
